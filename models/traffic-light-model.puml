@startuml

enum TrafficLightStates {
    RED
    AMBER
    GREEN
}

enum TrafficLightEvents {
    STOP
    GO
}

interface TrafficLight {
    val amberTimeout: Long
    setNotifyStopped(receiver: suspend () -> Unit)
    setNotifyStateChange(receiver: suspend (newState: TrafficLightStates) -> Unit)
    stopped() <<suspend>>
    switchRed(on: Boolean) <<suspend>>
    switchAmber(on: Boolean) <<suspend>>
    switchGreen(on: Boolean) <<suspend>>
    stateChanged(toState: TrafficLightStates) <<suspend>>
}

class TrafficLightFSM {
    fun start() <<suspend>>
    fun stop() <<suspend>>
}
TrafficLightFSM .up.> TrafficLightStates: <<uses>>
TrafficLightFSM ..> TrafficLightEvents: <<uses>>

TrafficLightFSM -left-> TrafficLight: context

class TrafficLightModel {
    name: String
    val red: LiveData<Boolean>
    val amber: LiveData<Boolean>
    val green: LiveData<Boolean>
    changeAmberTimeout(value: Long)
    stopped() <<suspend>>
    switchRed(on: Boolean) <<suspend>>
    switchAmber(on: Boolean) <<suspend>>
    switchGreen(on: Boolean)  <<suspend>>
    setNotifyStopped(receiver: suspend () -> Unit)
    setNotifyStateChange(receiver: suspend (newState: TrafficLightStates) -> Unit)
    stateChanged(toState: TrafficLightStates) <<suspend>>
}
TrafficLightModel --|> TrafficLight
TrafficLightModel -left-|> ViewModel
@enduml